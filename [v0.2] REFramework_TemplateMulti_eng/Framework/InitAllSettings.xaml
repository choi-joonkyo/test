<Activity mc:Ignorable="sap sap2010" x:Class="Workflow" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ConfigSheets" Type="InArgument(s:String[])" />
    <x:Property Name="in_ConfigFile" Type="InArgument(x:String)" />
    <x:Property Name="out_Config" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>848.8,5471.2</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>워크플로_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="58">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>FDX_CommonLib_Legacy.DLL.Common</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>FDXCommonLibrary</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="42">
      <AssemblyReference>FDX_CommonLib_Legacy</AssemblyReference>
      <AssemblyReference>FDXCommonLibrary</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="1. Initialize a component Dictionary that will be used throughout the project.&#xA;2. Read the Settings, Constants, and Credentials sheets in Config.xlsx and save them as Key, Value in the Dictionary.&#xA;3. For the Assets sheet in Config.xlsx, import the values from Orchestrator and save them as Key, Value.&#xA;&#xA;** Note that if the Key value is duplicated, it will be overwritten by the last value read." DisplayName="InitAllSettings" sap:VirtualizedContainerService.HintSize="792.8,5406.4" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Sequence name" Name="str_SequenceName" />
      <Variable x:TypeArguments="sd:DataTable" sap2010:Annotation.AnnotationText="Data from the Config.xlsx sheet&#xA;(Settings, Constants, Credentials)" Name="dt_Config" />
      <Variable x:TypeArguments="sd:DataTable" sap2010:Annotation.AnnotationText="Data from the Config.xlsx sheet&#xA;(Assets)" Name="dt_Assets" />
      <Variable x:TypeArguments="ui:GenericValue" sap2010:Annotation.AnnotationText="Extracted Asset values" Name="AssetValue" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign DisplayName="Assign-InitAllSettings" sap:VirtualizedContainerService.HintSize="744.8,80.8" sap2010:WorkflowViewState.IdRef="Assign_26">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[str_SequenceName]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">InitAllSettings</InArgument>
      </Assign.Value>
    </Assign>
    <ui:LogMessage DisplayName="Log Message - InitAllSettings Start" sap:VirtualizedContainerService.HintSize="744.8,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Trace" Message="[&quot;[&quot; + str_SequenceName + &quot;] Start initializing Config&quot;]" />
    <Assign sap2010:Annotation.AnnotationText="Dictionary(of String, Object)" DisplayName="Assing-out_Config Initializing variables" sap:VirtualizedContainerService.HintSize="744.8,112" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[out_Config]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[New Dictionary(of String, Object)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="Excel Application Scope - Read Config.xlsx" sap:VirtualizedContainerService.HintSize="744.8,342.4" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2" InstanceCachePeriod="3000" ReadOnly="True" SensitivityOperation="None" Visible="False" WorkbookPath="[in_ConfigFile]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do - Initialize Config" sap:VirtualizedContainerService.HintSize="424.8,232.8" sap2010:WorkflowViewState.IdRef="Sequence_18">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each-Repeat for the specified number of sheets" sap:VirtualizedContainerService.HintSize="376.8,52.8" sap2010:WorkflowViewState.IdRef="ForEach`1_7" Values="[in_ConfigSheets]">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="Sheet" />
                  </ActivityAction.Argument>
                  <Sequence sap2010:Annotation.AnnotationText="Read the [Settings], [Constants], and [Credentials] sheets in Config.xlsx and save them as Key, Value in Dictionary." DisplayName="Dictionary Add a value to a variable (out_Config)" sap:VirtualizedContainerService.HintSize="564.8,692.8" sap2010:WorkflowViewState.IdRef="Sequence_19">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelReadRange AddHeaders="True" DataTable="[dt_Config]" DisplayName="Read Range -Read selected sheets" sap:VirtualizedContainerService.HintSize="516.8,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="[Sheet]">
                      <ui:ExcelReadRange.Range>
                        <InArgument x:TypeArguments="x:String">
                          <Literal x:TypeArguments="x:String" Value="" />
                        </InArgument>
                      </ui:ExcelReadRange.Range>
                    </ui:ExcelReadRange>
                    <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Config]" DisplayName="For each-Repeat for number of rows in selected sheet" sap:VirtualizedContainerService.HintSize="516.8,461.6" sap2010:WorkflowViewState.IdRef="ForEachRow_6">
                      <ui:ForEachRow.Body>
                        <ActivityAction x:TypeArguments="sd:DataRow">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                          </ActivityAction.Argument>
                          <If sap2010:Annotation.AnnotationText="Read non-blank rows from the sheet and add them to the Dictionary variable" Condition="[Not String.IsNullOrWhiteSpace(row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If-If the value in Row is not empty" sap:VirtualizedContainerService.HintSize="483.2,345.6" sap2010:WorkflowViewState.IdRef="If_8">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Then>
                              <Assign sap2010:Annotation.AnnotationText="Key : Name&#xA;Value : Value" DisplayName="Assign-Add keys, values to Config (Settings, Constants, Credentials)" sap:VirtualizedContainerService.HintSize="433.6,125.6" sap2010:WorkflowViewState.IdRef="Assign_29">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Object">[out_Config(Row("Name").ToString.Trim)]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Object">[Row("Value")]</InArgument>
                                </Assign.Value>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Assign>
                            </If.Then>
                          </If>
                        </ActivityAction>
                      </ui:ForEachRow.Body>
                    </ui:ForEachRow>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ForEach>
            <TryCatch DisplayName="Try-Assets Initialize" sap:VirtualizedContainerService.HintSize="376.8,52.8" sap2010:WorkflowViewState.IdRef="TryCatch_7">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <TryCatch.Try>
                <Sequence sap2010:Annotation.AnnotationText="Read the [Assets] sheet in Config.xlsx, extract values from Orchestrator based on the Asset column, and save them as Key, Value in the &#xA;Dictionary as Key, Value." DisplayName="Getting Assets values from Orchestrator" sap:VirtualizedContainerService.HintSize="520,959.2" sap2010:WorkflowViewState.IdRef="Sequence_22">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelReadRange AddHeaders="True" DataTable="[dt_Assets]" DisplayName="Read Range Read the Assets sheet" sap:VirtualizedContainerService.HintSize="472,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_2" SheetName="Assets">
                    <ui:ExcelReadRange.Range>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </ui:ExcelReadRange.Range>
                  </ui:ExcelReadRange>
                  <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Assets]" DisplayName="For each-Repeat as many times as there are rows in the Assets sheet" sap:VirtualizedContainerService.HintSize="472,712" sap2010:WorkflowViewState.IdRef="ForEachRow_7">
                    <ui:ForEachRow.Body>
                      <ActivityAction x:TypeArguments="sd:DataRow">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                        </ActivityAction.Argument>
                        <TryCatch DisplayName="Try-Importing assets from Orchestrator" sap:VirtualizedContainerService.HintSize="438,598" sap2010:WorkflowViewState.IdRef="TryCatch_6">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <TryCatch.Try>
                            <Sequence DisplayName="Importing assets from Orchestrator" sap:VirtualizedContainerService.HintSize="376,371" sap2010:WorkflowViewState.IdRef="Sequence_21">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="[row(&quot;Asset&quot;).ToString]" CacheStrategy="None" DisplayName="Get Asset-Importing assets from Orchestrator" FolderPath="[row(&quot;OrchestratorAssetFolder&quot;).ToString]" sap:VirtualizedContainerService.HintSize="334,137" sap2010:WorkflowViewState.IdRef="GetRobotAsset_3">
                                <ui:GetRobotAsset.Value>
                                  <OutArgument x:TypeArguments="ui:GenericValue">[AssetValue]</OutArgument>
                                </ui:GetRobotAsset.Value>
                              </ui:GetRobotAsset>
                              <Assign sap2010:Annotation.AnnotationText="Key : Name&#xA;Value : AssetValue" DisplayName="Assign-Add keys, values to Config (Assets)" sap:VirtualizedContainerService.HintSize="334,102" sap2010:WorkflowViewState.IdRef="Assign_30">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Object">[out_Config(row("Name").ToString)]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="ui:GenericValue">[AssetValue]</InArgument>
                                </Assign.Value>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Assign>
                            </Sequence>
                          </TryCatch.Try>
                          <TryCatch.Catches>
                            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_6">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ActivityAction x:TypeArguments="s:Exception">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                </ActivityAction.Argument>
                                <If sap2010:Annotation.AnnotationText="Throwing an exception if an asset name exists in the Config.xlsx file, but Orchestrator fails to import it" Condition="[Not String.IsNullOrWhiteSpace(Row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If-If an error occurs while extracting the specified Asset" sap:VirtualizedContainerService.HintSize="484,288" sap2010:WorkflowViewState.IdRef="If_9">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <If.Then>
                                    <Throw DisplayName="Throw-Asset import failure exceptions" Exception="[New Exception(&quot;Asset import failure exceptions : &quot; + Row(&quot;Asset&quot;).ToString + &quot; / &quot; + Exception.Message)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_3" />
                                  </If.Then>
                                </If>
                              </ActivityAction>
                            </Catch>
                          </TryCatch.Catches>
                        </TryCatch>
                      </ActivityAction>
                    </ui:ForEachRow.Body>
                  </ui:ForEachRow>
                </Sequence>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="518,21" sap2010:WorkflowViewState.IdRef="Catch`1_7">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <Rethrow DisplayName="Rethrow-Exception during Asset initialization" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Rethrow_3" />
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
            </TryCatch>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="744.8,2048" sap2010:WorkflowViewState.IdRef="CommentOut_2">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="709.6,1969.6" sap2010:WorkflowViewState.IdRef="Sequence_20">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ueab:ExcelProcessScopeX LaunchTimeout="{x:Null}" sap2010:Annotation.AnnotationText="* If it doesn't work for your customer, try changing the Launch Method, or test with a different Activity (if not, use Classic)" DisplayAlerts="False" DisplayName="Setting up reading of Excel Process Scope-Config.xlsx" ExistingProcessAction="None" FileConflictResolution="ThrowException" sap:VirtualizedContainerService.HintSize="661.6,1874.4" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_1" LaunchMethod="Automation" MacroSettings="EnableAll" ProcessMode="ReuseIfExists" ShowExcelWindow="False">
            <ueab:ExcelProcessScopeX.Body>
              <ActivityAction x:TypeArguments="ui:IExcelProcess">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                </ActivityAction.Argument>
                <ueab:ExcelApplicationCard Password="{x:Null}" SensitivityLabel="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="Use Excel File- Read Config.xlsx" sap:VirtualizedContainerService.HintSize="628,1744" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" ReadFormatting="RawValue" ReadOnly="True" ResizeWindow="None" SensitivityOperation="None" WorkbookPath="[in_ConfigFile]">
                  <ueab:ExcelApplicationCard.Body>
                    <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Do - Initialize Config" sap:VirtualizedContainerService.HintSize="594,1478" sap2010:WorkflowViewState.IdRef="Sequence_14">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each-Repeat for the specified number of sheets" sap:VirtualizedContainerService.HintSize="552,51" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[in_ConfigSheets]">
                          <ui:ForEach.Body>
                            <ActivityAction x:TypeArguments="x:String">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="x:String" Name="Sheet" />
                              </ActivityAction.Argument>
                              <Sequence sap2010:Annotation.AnnotationText="Read the [Settings], [Constants], and [Credentials] sheets in Config.xlsx and save them as Key, Value in Dictionary." DisplayName="Dictionary Add a value to a variable (out_Config)" sap:VirtualizedContainerService.HintSize="560,774" sap2010:WorkflowViewState.IdRef="Sequence_13">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ueab:ReadRangeX DisplayName="Read Range-Read selected sheets" sap:VirtualizedContainerService.HintSize="518,167" sap2010:WorkflowViewState.IdRef="ReadRangeX_1" Range="[Excel.Sheet(Sheet)]" SaveTo="[dt_Config]" />
                                <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Config]" DisplayName="For each-Repeat for number of rows in selected sheet" sap:VirtualizedContainerService.HintSize="518,433" sap2010:WorkflowViewState.IdRef="ForEachRow_4">
                                  <ui:ForEachRow.Body>
                                    <ActivityAction x:TypeArguments="sd:DataRow">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                                      </ActivityAction.Argument>
                                      <If sap2010:Annotation.AnnotationText="Read non-blank rows from the sheet and add them to the Dictionary variable" Condition="[Not String.IsNullOrWhiteSpace(row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If-If the value in Row is not empty" sap:VirtualizedContainerService.HintSize="484,319" sap2010:WorkflowViewState.IdRef="If_6">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <If.Then>
                                          <Assign sap2010:Annotation.AnnotationText="Key : Name&#xA;Value : Value" DisplayName="Assign-Add keys, values to Config (Settings, Constants, Credentials)" sap:VirtualizedContainerService.HintSize="262,102" sap2010:WorkflowViewState.IdRef="Assign_27">
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Object">[out_Config(Row("Name").ToString.Trim)]</OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:Object">[Row("Value")]</InArgument>
                                            </Assign.Value>
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                          </Assign>
                                        </If.Then>
                                      </If>
                                    </ActivityAction>
                                  </ui:ForEachRow.Body>
                                </ui:ForEachRow>
                              </Sequence>
                            </ActivityAction>
                          </ui:ForEach.Body>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:ForEach>
                        <TryCatch DisplayName="Try-Assets Initialize" sap:VirtualizedContainerService.HintSize="552,1295" sap2010:WorkflowViewState.IdRef="TryCatch_4">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <TryCatch.Try>
                            <Sequence sap2010:Annotation.AnnotationText="Read the [Assets] sheet in Config.xlsx, extract values from Orchestrator based on the Asset column, and save them as Key, Value in the &#xA;Dictionary as Key, Value." DisplayName="Getting Assets values from Orchestrator" sap:VirtualizedContainerService.HintSize="514,1068" sap2010:WorkflowViewState.IdRef="Sequence_16">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ueab:ReadRangeX DisplayName="Read Range-Read the Assets sheet" sap:VirtualizedContainerService.HintSize="472,167" sap2010:WorkflowViewState.IdRef="ReadRangeX_2" Range="[Excel.Sheet(&quot;Assets&quot;)]" SaveTo="[dt_Assets]">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ueab:ReadRangeX>
                              <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Assets]" DisplayName="For each-Repeat as many times as there are rows in the Assets sheet" sap:VirtualizedContainerService.HintSize="472,712" sap2010:WorkflowViewState.IdRef="ForEachRow_5">
                                <ui:ForEachRow.Body>
                                  <ActivityAction x:TypeArguments="sd:DataRow">
                                    <ActivityAction.Argument>
                                      <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                                    </ActivityAction.Argument>
                                    <TryCatch DisplayName="Try-Importing assets from Orchestrator" sap:VirtualizedContainerService.HintSize="438,598" sap2010:WorkflowViewState.IdRef="TryCatch_5">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <TryCatch.Try>
                                        <Sequence DisplayName="Importing assets from Orchestrator" sap:VirtualizedContainerService.HintSize="376,371" sap2010:WorkflowViewState.IdRef="Sequence_17">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="[row(&quot;Asset&quot;).ToString]" CacheStrategy="None" DisplayName="Get Asset-Importing assets from Orchestrator" FolderPath="[row(&quot;OrchestratorAssetFolder&quot;).ToString]" sap:VirtualizedContainerService.HintSize="334,137" sap2010:WorkflowViewState.IdRef="GetRobotAsset_1">
                                            <ui:GetRobotAsset.Value>
                                              <OutArgument x:TypeArguments="ui:GenericValue">[AssetValue]</OutArgument>
                                            </ui:GetRobotAsset.Value>
                                          </ui:GetRobotAsset>
                                          <Assign sap2010:Annotation.AnnotationText="Key : Name&#xA;Value : AssetValue" DisplayName="Assign-Add keys, values to Config (Assets)" sap:VirtualizedContainerService.HintSize="334,102" sap2010:WorkflowViewState.IdRef="Assign_28">
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Object">[out_Config(row("Name").ToString)]</OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="ui:GenericValue">[AssetValue]</InArgument>
                                            </Assign.Value>
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                          </Assign>
                                        </Sequence>
                                      </TryCatch.Try>
                                      <TryCatch.Catches>
                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ActivityAction x:TypeArguments="s:Exception">
                                            <ActivityAction.Argument>
                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                            </ActivityAction.Argument>
                                            <If sap2010:Annotation.AnnotationText="Throwing an exception if an asset name exists in the Config.xlsx file, but Orchestrator fails to import it" Condition="[Not String.IsNullOrWhiteSpace(Row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If-If an error occurs while extracting the specified Asset" sap:VirtualizedContainerService.HintSize="484,288" sap2010:WorkflowViewState.IdRef="If_7">
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                              <If.Then>
                                                <Throw DisplayName="Throw-Asset import failure exceptions" Exception="[New Exception(&quot;Asset import failure exceptions : &quot; + Row(&quot;Asset&quot;).ToString + &quot; / &quot; + Exception.Message)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_2" />
                                              </If.Then>
                                            </If>
                                          </ActivityAction>
                                        </Catch>
                                      </TryCatch.Catches>
                                    </TryCatch>
                                  </ActivityAction>
                                </ui:ForEachRow.Body>
                              </ui:ForEachRow>
                            </Sequence>
                          </TryCatch.Try>
                          <TryCatch.Catches>
                            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="518,21" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ActivityAction x:TypeArguments="s:Exception">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                </ActivityAction.Argument>
                                <Rethrow DisplayName="Rethrow-Exception during Asset initialization" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Rethrow_2" />
                              </ActivityAction>
                            </Catch>
                          </TryCatch.Catches>
                        </TryCatch>
                      </Sequence>
                    </ActivityAction>
                  </ueab:ExcelApplicationCard.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ueab:ExcelApplicationCard>
              </ActivityAction>
            </ueab:ExcelProcessScopeX.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ueab:ExcelProcessScopeX>
        </Sequence>
      </ui:CommentOut.Body>
    </ui:CommentOut>
    <ui:CommentOut sap2010:Annotation.AnnotationText="Proceed without opening Excel (not possible for DRM-ed sites)" DisplayName="Comment Out-Process with Workbook" sap:VirtualizedContainerService.HintSize="740,2258" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence sap2010:Annotation.AnnotationText="Proceed without opening Excel (not possible for DRM-ed sites)" DisplayName="Processing with workbooks" sap:VirtualizedContainerService.HintSize="638,2180" sap2010:WorkflowViewState.IdRef="Sequence_12">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each - Repeats a specified number of sheets - Workbook" sap:VirtualizedContainerService.HintSize="596,817" sap2010:WorkflowViewState.IdRef="ForEach`1_5" Values="[in_ConfigSheets]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="Sheet" />
                </ActivityAction.Argument>
                <Sequence sap2010:Annotation.AnnotationText="Read the [Settings], [Constants], and [Credentials] sheets in Config.xlsx and save them as Key, Value in Dictionary." DisplayName="For Each - Repeats a specified number of sheets - Workbook" sap:VirtualizedContainerService.HintSize="560,694" sap2010:WorkflowViewState.IdRef="Sequence_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ReadRange Range="{x:Null}" WorkbookPathResource="{x:Null}" AddHeaders="True" DataTable="[dt_Config]" DisplayName="Read range - Read selected sheets - Workbook" sap:VirtualizedContainerService.HintSize="518,87" sap2010:WorkflowViewState.IdRef="ReadRange_2" SheetName="[Sheet]" WorkbookPath="[in_ConfigFile]" />
                  <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Config]" DisplayName="For each - Repeat as many times as the number of rows in the selected sheet - Workbook" sap:VirtualizedContainerService.HintSize="518,433" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
                    <ui:ForEachRow.Body>
                      <ActivityAction x:TypeArguments="sd:DataRow">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                        </ActivityAction.Argument>
                        <If sap2010:Annotation.AnnotationText="Read non-blank rows from the sheet and add them to the Dictionary variable" Condition="[Not String.IsNullOrWhiteSpace(row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If-Row's value is not empty - Workbook" sap:VirtualizedContainerService.HintSize="484,319" sap2010:WorkflowViewState.IdRef="If_1">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Assign sap2010:Annotation.AnnotationText="Key : Name&#xA;Value : Value" DisplayName="Add Keys, Values to Assign-Config (Settings, Constansts, Credentials) - Workbook" sap:VirtualizedContainerService.HintSize="262,102" sap2010:WorkflowViewState.IdRef="Assign_15">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Object">[out_Config(Row("Name").ToString.Trim)]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Object">[Row("Value")]</InArgument>
                              </Assign.Value>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </Assign>
                          </If.Then>
                        </If>
                      </ActivityAction>
                    </ui:ForEachRow.Body>
                  </ui:ForEachRow>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
          <TryCatch DisplayName="Initialize Try-Assets - Workbook" sap:VirtualizedContainerService.HintSize="596,1200" sap2010:WorkflowViewState.IdRef="TryCatch_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch.Try>
              <Sequence sap2010:Annotation.AnnotationText="Read the [Assets] sheet in Config.xlsx, extract values from Orchestrator based on the Asset column, and save them as Key, Value in the Dictionary as Key, Value." DisplayName="Initialize Try-Assets - Workbook" sap:VirtualizedContainerService.HintSize="514,973" sap2010:WorkflowViewState.IdRef="Sequence_6">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ReadRange Range="{x:Null}" WorkbookPathResource="{x:Null}" AddHeaders="True" DataTable="[dt_Assets]" DisplayName="Read range-Assets sheet - Workbook" sap:VirtualizedContainerService.HintSize="472,87" sap2010:WorkflowViewState.IdRef="ReadRange_3" SheetName="Assets" WorkbookPath="[in_ConfigFile]" />
                <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Assets]" DisplayName="Repeat as many times as there are rows in the For each-Assets sheet - Workbook" sap:VirtualizedContainerService.HintSize="472,712" sap2010:WorkflowViewState.IdRef="ForEachRow_3">
                  <ui:ForEachRow.Body>
                    <ActivityAction x:TypeArguments="sd:DataRow">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                      </ActivityAction.Argument>
                      <TryCatch DisplayName="Repeat as many times as there are rows in the For each-Assets sheet - Workbook" sap:VirtualizedContainerService.HintSize="438,598" sap2010:WorkflowViewState.IdRef="TryCatch_3">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <TryCatch.Try>
                          <Sequence DisplayName="Importing Assets from Orchestrator - Workbook" sap:VirtualizedContainerService.HintSize="376,371" sap2010:WorkflowViewState.IdRef="Sequence_11">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="[row(&quot;Asset&quot;).ToString]" CacheStrategy="None" DisplayName="Get Asset-Importing Assets from Orchestrator - Workbook" sap:VirtualizedContainerService.HintSize="334,137" sap2010:WorkflowViewState.IdRef="GetRobotAsset_2">
                              <ui:GetRobotAsset.Value>
                                <OutArgument x:TypeArguments="ui:GenericValue">[AssetValue]</OutArgument>
                              </ui:GetRobotAsset.Value>
                            </ui:GetRobotAsset>
                            <Assign sap2010:Annotation.AnnotationText="Key : Name&#xA;Value : AssetValue" DisplayName="Add Keys, Values to Assign-Config (Assets) - Workbook" sap:VirtualizedContainerService.HintSize="334,102" sap2010:WorkflowViewState.IdRef="Assign_23">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Object">[out_Config(row("Name").ToString)]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="ui:GenericValue">[AssetValue]</InArgument>
                              </Assign.Value>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </Assign>
                          </Sequence>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                              </ActivityAction.Argument>
                              <If sap2010:Annotation.AnnotationText="Throw an exception if an asset name exists in the Config.xlsx file, but Orchestrator fails to import it" Condition="[Not String.IsNullOrWhiteSpace(Row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If - If an error occurs while extracting the specified Asset - Workbook" sap:VirtualizedContainerService.HintSize="484,288" sap2010:WorkflowViewState.IdRef="If_5">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Throw DisplayName="Throw-Asset Import Failure Exception - Workbook" Exception="[New Exception(&quot;Asset import failed : &quot; + Row(&quot;Asset&quot;).ToString + &quot; / &quot; + Exception.Message)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
                                </If.Then>
                              </If>
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                      </TryCatch>
                    </ActivityAction>
                  </ui:ForEachRow.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ForEachRow>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="518,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                  </ActivityAction.Argument>
                  <Rethrow DisplayName="Rethrow-An Exception During Asset Initialization - Workbook" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Rethrow_1" />
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:LogMessage DisplayName="Log Message-InitAllSettings Complete" sap:VirtualizedContainerService.HintSize="740,91" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Trace" Message="[&quot;[&quot; + str_SequenceName + &quot;] Config initialization complete&quot;]" />
  </Sequence>
</Activity>